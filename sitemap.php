<?php

/*
Plugin Name: Autogenerated Sitemap
//Plugin URI: 
Description: A WordPress plugin for autogenerating sitemap
Version: 1
Author: Jeromel Chavez
Author URI: https://github.com/jeromelchavez/autogeneratedsitemapwp
License: A "Slug" license name e.g. GPL2
*/

class Sitemap {
    private static $version = 1;

    // Runs on plugin activation
    public static function activateSitemaps () {
        self::rewriteRules();
        flush_rewrite_rules();

        update_option('sitemap_version', self::$version);

        // deletes files sitemap.xml from old versions of the plugin
        require_once('sitemapBuilder.php');
        SitemapBuilder::deleteFiles();
    }

    // Runs on plugin deactivation
    public static function deactivateSitemaps () {
        flush_rewrite_rules();
    }

    // Updates the plugin if needed (calls activateSitemaps)
    public static function updateCheck () {
        $current = get_option('sitemap_version');

        if (!$current || $current < self::$version) {
            self::activateSitemaps();
        }
    }

    // Registers most hooks
    public static function registerHooks () {
        register_activation_hook(__FILE__, array(__CLASS__, 'activateSitemaps'));
        register_deactivation_hook(__FILE__, array(__CLASS__, 'deactivateSitemaps'));
        add_action('admin_menu', array(__CLASS__, 'sitemapAdminSetup'));
        add_action('init', array(__CLASS__, 'rewriteRules'), 1);
        add_filter('query_vars', array(__CLASS__, 'addSitemapQuery'), 1);
        add_filter('template_redirect', array(__CLASS__, 'generateSitemapContent'), 1);
        add_filter("plugin_action_links_" . plugin_basename(__FILE__), array(__CLASS__, 'pluginSettingsLink'));
//        if(get_option('sitemap_ping_search_engine')){
//            require_once('sitemapPingSearchEngine.php');
//            add_action( 'publish_post', array('SitemapPingSearchEngine', 'pingGoogle'));
//            add_action( 'publish_post', array('SitemapPingSearchEngine', 'pingBing'));
//        }
    }

    // Adds a link to settings from the plugins page
    public static function pluginSettingsLink ($links) {
        $theLink = array(sprintf('<a href="%s">%s</a>', esc_url(admin_url('options-general.php?page=sitemapSettings')), __('Settings')));
        return array_merge($links, $theLink);
    }

    // Sets the option menu for admins and enqueues scripts n styles
    public static function sitemapAdminSetup () {
        add_options_page('Sitemap', 'Sitemap', 'administrator', 'sitemapSettings', array(__CLASS__, 'sitemapAdminArea'));
        add_action('admin_enqueue_scripts', array(__CLASS__, 'sitemapScriptsAndStyles'));
        add_action('admin_init', array(__CLASS__, 'sitemapAdminInit'));
    }

    // Register settings on admin_init
    public static function sitemapAdminInit () {
        $group = 'sitemap-group';
        register_setting($group, 'sitemap_other_urls');
        register_setting($group, 'sitemap_block_urls');
        register_setting($group, 'sitemap_disp_categories');
        register_setting($group, 'sitemap_disp_tags');
        register_setting($group, 'sitemap_disp_authors');
        register_setting($group, 'sitemap_ping_search_engine');
        register_setting($group, 'sitemap_add_to_robotstxt');
        register_setting($group, 'sitemap_excluded_categories');
        register_setting($group, 'sitemap_excluded_posts');
        self::updateCheck();
    }
    // Rewrite rules for sitemaps
    public static function rewriteRules () {
        add_rewrite_rule('sitemap\.xml$', 'index.php?sitemap=xml', 'top');
    }

    // Add custom query
    public static function addSitemapQuery ($vars) {
        $vars[] = 'sitemap';
        return $vars;
    }

    // Generates the content
    public static function generateSitemapContent () {
        global $wp_query;

        if (isset($wp_query->query_vars['sitemap'])) {
            $q = $wp_query->query_vars['sitemap'];

            if (!empty($q)) {
                $wp_query->is_404 = false;

                require_once('sitemapBuilder.php');
                $sitemap = new SitemapBuilder();

                if ($q === 'xml') {
                    header('Content-type: application/xml; charset=utf-8');
                }
                $sitemap->getContent($q);
                exit;
            }
        }
    }

    // Add custom scripts and styles to the plugins customization page in admin area
    public static function sitemapScriptsAndStyles ($page) {
        if ($page === 'settings_page_sitemapSettings') {
            wp_enqueue_style('sitemap-admin-select2-css', 'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css');
            wp_enqueue_script('sitemap-admin-js', plugin_dir_url( __FILE__ ) . '/js/sitemap.js', array('jquery'), '1.0.0', true);
            wp_enqueue_script('sitemap-admin-selctc2-js',  'https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js', array('jquery'), '1.0.0', true);
        }
    }

    public static function sitemapAdminArea () {

        if (count($_POST)>0){
            require_once('sitemapOptions.php');

            $options = new SitemapOptions();
            $options->setOptions(
                (isset($_POST['sitemap_disp_categories']) ? 1 : 0),
                (isset($_POST['sitemap_disp_tags']) ? 1 : 0),
                (isset($_POST['sitemap_disp_authors']) ? 1 : 0),
                (isset($_POST['sitemap_ping_search_engine']) ? 1 : 0),
                (isset($_POST['sitemap_add_to_robotstxt']) ? 1 : 0),
                $_POST['sitemap_excluded_categories'],
                $_POST['sitemap_excluded_posts'],
                array('urls' => $_POST['sitemap_custom_page_url'], 'dates' => $_POST['sitemap_custom_page_date'])
            );
        }

        require_once('sitemapSettingsUI.php');
        $settingUI = new SitemapSettingsUI();

        echo $settingUI->htmlSettings();

    }
}

Sitemap::registerHooks();
